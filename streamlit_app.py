import streamlit as st
import requests
import json
import re
from io import BytesIO
from reportlab.lib import colors
from reportlab.lib.pagesizes import A4, landscape
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, PageBreak
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import mm
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib.enums import TA_CENTER, TA_LEFT

st.set_page_config(page_title="Speiseplan-Generator", layout="wide", page_icon="üë®‚Äçüç≥")

# Sidebar f√ºr API-Key
with st.sidebar:
    st.header("üîë API-Konfiguration")
    
    # Versuche API-Key aus Secrets zu laden
    api_key_from_secrets = None
    try:
        if hasattr(st, 'secrets') and 'ANTHROPIC_API_KEY' in st.secrets:
            api_key_from_secrets = st.secrets['ANTHROPIC_API_KEY']
            st.success("‚úÖ API-Key aus Konfiguration geladen!")
            st.info("üí° Sie k√∂nnen den Key auch manuell unten eingeben, um ihn zu √ºberschreiben.")
    except Exception:
        pass
    
    # Manueller API-Key Input (optional, √ºberschreibt Secrets)
    api_key_manual = st.text_input(
        "Claude API-Key (optional)",
        type="password",
        help="Optional - nur wenn nicht in secrets.toml hinterlegt",
        placeholder="Optional - nur wenn nicht konfiguriert"
    )
    
    # Verwende manuellen Key wenn eingegeben, sonst den aus Secrets
    api_key = api_key_manual if api_key_manual else api_key_from_secrets
    
    if api_key:
        st.success("API-Key bereit!")
    else:
        st.warning("Bitte API-Key eingeben oder in secrets.toml hinterlegen")
        with st.expander("‚ÑπÔ∏è API-Key dauerhaft speichern"):
            st.markdown("""
            **Lokal:** Erstellen Sie `.streamlit/secrets.toml`:
            ```toml
            ANTHROPIC_API_KEY = "Ihr-Key"
            ```
            
            **Cloud:** In App-Settings ‚Üí Secrets eintragen
            
            Details: Siehe API_KEY_ANLEITUNG.md
            """)
    
    st.divider()
    
    st.header("‚öôÔ∏è Speiseplan-Konfiguration")
    wochen = st.number_input("Anzahl Wochen", min_value=1, max_value=4, value=1)
    menulinien = st.number_input("Anzahl Men√ºlinien", min_value=1, max_value=5, value=2)
    
    st.subheader("Bezeichnung der Men√ºlinien")
    menu_namen = []
    for i in range(menulinien):
        name = st.text_input(f"Men√ºlinie {i+1}", value=f"Men√º {i+1}", key=f"menu_{i}")
        menu_namen.append(name)

# Titel
st.title("üë®‚Äçüç≥ Professioneller Speiseplan-Generator")
st.markdown("*F√ºr Gemeinschaftsverpflegung, Krankenh√§user & Senioreneinrichtungen*")
st.divider()

def generiere_tages_prompt(tag, woche_nr, menulinien, menu_namen):
    """Generiert Prompt f√ºr einen einzelnen Tag"""
    menu_liste = "\n".join([f"{i+1}. {name}" for i, name in enumerate(menu_namen)])

    return f"""Du bist ein di√§tisch ausgebildeter K√ºchenmeister mit √ºber 25 Jahren Erfahrung in der Gemeinschaftsverpflegung, spezialisiert auf Krankenhaus- und Seniorenverpflegung.

AUFGABE: Erstelle einen professionellen Speiseplan f√ºr {tag} (Woche {woche_nr}) mit {menulinien} Men√ºlinie(n).

MEN√úLINIEN:
{menu_liste}

WICHTIGE VORGABEN:
- Seniorengerechte Kost: leicht verdaulich, weiche Konsistenzen wo n√∂tig
- N√§hrstoffdichte Gerichte (wichtig bei oft verringertem Appetit)
- Abwechslungsreich und ausgewogen
- IMMER mindestens 2-3 Beilagen zum Mittagessen (z.B. Kartoffeln/Reis/Nudeln UND Gem√ºse/Salat)
- Saisonale und regionale Produkte bevorzugen
- Klare Portionsangaben f√ºr Gemeinschaftsverpflegung (pro Person)
- Allergenkennzeichnung
- Pro Tag: Fr√ºhst√ºck, Mittagessen (MIT BEILAGEN!), Abendessen + Zwischenmahlzeit

ERN√ÑHRUNGSPHYSIOLOGISCHE ANFORDERUNGEN:
- Ausreichend Protein (1,0-1,2g/kg K√∂rpergewicht)
- Ballaststoffreich aber gut vertr√§glich
- Calciumreich f√ºr Knochengesundheit
- Vitamin D Quellen einbauen
- Fl√ºssigkeitsreiche Gerichte (Suppen, Eint√∂pfe)

WICHTIG: JEDES Mittagessen MUSS mindestens 2-3 Beilagen haben!

KRITISCH: Du MUSST mit einem JSON-Objekt antworten, das EXAKT diese Struktur hat:

STRUKTUR DER ANTWORT (JSON) - NUR F√úR DIESEN EINEN TAG:
{{
  "tag": "{tag}",
  "menues": [
    {{
      "menuName": "Name der Men√ºlinie",
      "fruehstueck": {{
        "hauptgericht": "Gericht",
        "beilagen": ["Beilage 1", "Beilage 2"],
        "getraenk": "Getr√§nk"
      }},
      "mittagessen": {{
        "vorspeise": "Suppe/Vorspeise",
        "hauptgericht": "Hauptgericht",
        "beilagen": ["Beilage 1 (z.B. Kartoffeln)", "Beilage 2 (z.B. Gem√ºse)", "Beilage 3 (z.B. Salat)"],
        "nachspeise": "Dessert",
        "naehrwerte": {{
          "kalorien": "ca. X kcal",
          "protein": "X g"
        }},
        "allergene": ["Liste der Allergene"]
      }},
      "zwischenmahlzeit": "Obst/Joghurt/etc.",
      "abendessen": {{
        "hauptgericht": "Gericht",
        "beilagen": ["Beilage 1", "Beilage 2"],
        "getraenk": "Getr√§nk"
      }}
    }}
  ]
}}

WICHTIGE JSON-REGELN:
- Verwende AUSSCHLIESSLICH den Tool-Call 'return_json'
- Alle Strings in doppelten Anf√ºhrungszeichen (")
- Kommata zwischen allen Feldern, KEINE trailing commas vor }} oder ]
- Alle Klammern m√ºssen geschlossen sein: {{ }} [ ]
- Keine Kommentare im JSON
- Keine Sonderzeichen oder Smart Quotes

Antworte NUR mit dem return_json Tool-Call. Kein Text davor oder danach!"""

def generiere_rezepte_prompt(gerichte_batch):
    """
    Generiert Prompt f√ºr eine Batch von Gerichten

    Args:
        gerichte_batch: Liste von Dicts mit gericht, beilagen, woche, tag, menu
    """
    gerichte_liste = "\n".join([
        f"{i+1}. {g['gericht']} mit {', '.join(g['beilagen'])} (Woche {g['woche']}, {g['tag']}, {g['menu']})"
        for i, g in enumerate(gerichte_batch)
    ])
    
    return f"""Du bist ein di√§tisch ausgebildeter K√ºchenmeister mit 25+ Jahren Erfahrung.

AUFGABE: Erstelle detaillierte Rezepte f√ºr folgende Gerichte (f√ºr 10 Portionen):

{gerichte_liste}

ANFORDERUNGEN:
- Portionsangaben f√ºr 10 Personen
- Seniorengerechte Zubereitung
- Genaue Mengenangaben in Gramm/Liter
- Schritt-f√ºr-Schritt Anleitung
- Zeiten (Vorbereitung und Garzeit)
- N√§hrwertangaben pro Portion
- Allergenkennzeichnung
- Tipps f√ºr Gro√ük√ºche

JSON-FORMAT:
{{
  "rezepte": [
    {{
      "name": "Gerichtname",
      "woche": 1,
      "tag": "Montag",
      "menu": "Men√ºname",
      "portionen": 10,
      "zeiten": {{
        "vorbereitung": "X Minuten",
        "garzeit": "X Minuten"
      }},
      "zutaten": [
        {{
          "name": "Zutat",
          "menge": "X g/ml",
          "hinweis": "Optional"
        }}
      ],
      "zubereitung": [
        "Schritt 1 detailliert",
        "Schritt 2 detailliert"
      ],
      "naehrwerte": {{
        "kalorien": "X kcal",
        "protein": "X g",
        "fett": "X g",
        "kohlenhydrate": "X g",
        "ballaststoffe": "X g"
      }},
      "allergene": ["Liste"],
      "tipps": ["Tipp 1", "Tipp 2"]
    }}
  ]
}}

WICHTIGE JSON-REGELN:
- Verwende AUSSCHLIESSLICH den Tool-Call 'return_json'
- Alle Strings in doppelten Anf√ºhrungszeichen (")
- Kommata zwischen allen Feldern, KEINE trailing commas
- Alle Klammern m√ºssen geschlossen sein
- Keine Kommentare im JSON

Antworte NUR mit dem return_json Tool-Call!"""


def generiere_rezepte_batch(speiseplan, api_key, batch_size=10, progress_callback=None):
    """
    Generiert Rezepte in Batches um Timeouts zu vermeiden

    Args:
        speiseplan: Der generierte Speiseplan
        api_key: API-Schl√ºssel
        batch_size: Anzahl Rezepte pro Batch (Standard: 10)
        progress_callback: Optional - Funktion f√ºr Fortschrittsanzeige

    Returns:
        Tuple von (rezepte_data, error_message)
    """
    import time

    # Extrahiere alle Hauptgerichte
    alle_gerichte = []
    for woche in speiseplan['speiseplan']['wochen']:
        for tag in woche['tage']:
            for menu in tag['menues']:
                hauptgericht = menu.get('mittagessen', {}).get('hauptgericht')
                if hauptgericht:
                    alle_gerichte.append({
                        'gericht': hauptgericht,
                        'beilagen': menu['mittagessen'].get('beilagen', []),
                        'woche': woche['woche'],
                        'tag': tag['tag'],
                        'menu': menu['menuName']
                    })

    if not alle_gerichte:
        return None, "Keine Gerichte im Speiseplan gefunden"

    # Teile in Batches auf
    alle_rezepte = []
    anzahl_batches = (len(alle_gerichte) + batch_size - 1) // batch_size

    for i in range(0, len(alle_gerichte), batch_size):
        batch_nr = (i // batch_size) + 1
        batch = alle_gerichte[i:i + batch_size]

        if progress_callback:
            progress_callback(
                f"Generiere Rezepte... Batch {batch_nr}/{anzahl_batches} "
                f"({len(batch)} Rezepte)"
            )

        # Generiere Rezepte f√ºr diesen Batch
        prompt = generiere_rezepte_prompt(batch)
        rezepte_data, error = rufe_claude_api(prompt, api_key, max_tokens=16000, use_json_mode=True)

        if error:
            # Bei Fehler: Versuche mit kleinerem Batch
            if len(batch) > 5:
                if progress_callback:
                    progress_callback(f"‚ö†Ô∏è Batch zu gro√ü, teile auf...")

                # Teile Batch in zwei H√§lften
                mid = len(batch) // 2
                for sub_batch in [batch[:mid], batch[mid:]]:
                    prompt = generiere_rezepte_prompt(sub_batch)
                    rezepte_data, error = rufe_claude_api(prompt, api_key, max_tokens=16000, use_json_mode=True)

                    if not error and rezepte_data and 'rezepte' in rezepte_data:
                        alle_rezepte.extend(rezepte_data['rezepte'])
                    time.sleep(1)
            else:
                # Auch kleine Batches schlagen fehl, √ºberspringe
                st.warning(f"‚ö†Ô∏è Rezeptgenerierung f√ºr Batch {batch_nr} fehlgeschlagen: {error}")
                continue
        else:
            if rezepte_data and 'rezepte' in rezepte_data:
                alle_rezepte.extend(rezepte_data['rezepte'])

        # Pause zwischen Batches
        time.sleep(0.5)

    if not alle_rezepte:
        return None, "Keine Rezepte konnten generiert werden"

    return {'rezepte': alle_rezepte}, None


def bereinige_json(text):
    """Bereinigt JSON-Text mit mehreren Fallback-Strategien"""
    if not text:
        return ""

    # Entferne Markdown Code-Bl√∂cke
    text = re.sub(r'```json\s*', '', text, flags=re.IGNORECASE)
    text = re.sub(r'```\s*', '', text)
    text = text.strip()

    # Ersetze typografische Anf√ºhrungszeichen
    replacements = {
        '"': '"', '"': '"', '‚Äû': '"',  # Smart quotes
        ''': "'", ''': "'", '‚Äö': "'",
        '‚Äì': '-', '‚Äî': '-',  # Dashes
        '\u200b': '',  # Zero-width space
        '\xa0': ' ',  # Non-breaking space
    }
    for old, new in replacements.items():
        text = text.replace(old, new)

    # Entferne JavaScript-style Kommentare
    text = re.sub(r'//.*?$', '', text, flags=re.MULTILINE)
    text = re.sub(r'/\*.*?\*/', '', text, flags=re.DOTALL)

    # Entferne trailing commas (h√§ufiger JSON-Fehler)
    text = re.sub(r',(\s*[}\]])', r'\1', text)

    # Finde das JSON-Objekt
    first_brace = text.find('{')
    last_brace = text.rfind('}')

    if first_brace != -1 and last_brace != -1 and last_brace > first_brace:
        text = text[first_brace:last_brace + 1]

    # Normalisiere Whitespace
    text = re.sub(r'\s+', ' ', text)
    text = text.strip()

    return text

def normalize_response_structure(data):
    """
    Normalisiert die Response-Struktur, um verschachtelte oder unerwartete Formate zu behandeln

    Args:
        data: Die rohe Response-Daten

    Returns:
        Normalisierte Daten-Struktur
    """
    if not isinstance(data, dict):
        return data

    # Wenn die Antwort bereits die erwarteten Felder hat, gib sie direkt zur√ºck
    if "menues" in data or "rezepte" in data or "pruefung" in data:
        return data

    # Suche nach verschachtelten Strukturen
    for key in ["data", "result", "output", "response", "tag", "day", "menu_plan", "speiseplan"]:
        if key in data and isinstance(data[key], dict):
            nested = data[key]
            # Rekursiv normalisieren
            if "menues" in nested or "rezepte" in nested or "pruefung" in nested:
                return normalize_response_structure(nested)

    # Wenn nichts gefunden, gib die Original-Daten zur√ºck
    return data

def rufe_claude_api(prompt, api_key, max_tokens=20000, use_json_mode=True):
    """
    Ruft Claude API auf mit verbessertem JSON-Parsing

    Args:
        prompt: Der Prompt-Text
        api_key: API-Schl√ºssel
        max_tokens: Maximale Token-Anzahl
        use_json_mode: Ob JSON-Tool-Call verwendet werden soll
    """
    try:
        # Request-Payload erstellen
        payload = {
            "model": "claude-sonnet-4-20250514",
            "max_tokens": max_tokens,
            "temperature": 0.0,  # Deterministisch f√ºr konsistente JSON-Ausgabe
            "messages": [{"role": "user", "content": prompt}]
        }

        # Optional: Tool-Call f√ºr strukturierte JSON-Ausgabe
        if use_json_mode:
            payload["system"] = (
                "Du bist ein di√§tisch ausgebildeter K√ºchenmeister. "
                "Gib dein Ergebnis AUSSCHLIESSLICH als Tool-Aufruf 'return_json' zur√ºck. "
                "Das JSON muss PERFEKT valide sein: alle Strings in doppelten Anf√ºhrungszeichen, "
                "korrekte Kommata zwischen Feldern, keine trailing commas. "
                "WICHTIG: Das JSON-Objekt MUSS die Top-Level-Felder haben, die im Prompt gefordert werden "
                "(z.B. 'tag' und 'menues' f√ºr Tagespl√§ne, 'rezepte' f√ºr Rezepte). "
                "Erstelle KEINE verschachtelte Wrapper-Objekte. "
                "Keine Erkl√§rungen, kein Markdown, nur strukturiertes JSON im Tool-Call."
            )
            payload["tools"] = [{
                "name": "return_json",
                "description": "Gibt strukturierte JSON-Daten zur√ºck",
                "input_schema": {
                    "type": "object",
                    "properties": {}
                }
            }]
            payload["tool_choice"] = {"type": "tool", "name": "return_json"}

        # API-Aufruf
        response = requests.post(
            "https://api.anthropic.com/v1/messages",
            headers={
                "Content-Type": "application/json",
                "x-api-key": api_key,
                "anthropic-version": "2023-06-01"
            },
            json=payload,
            timeout=180
        )

        if response.status_code != 200:
            error_detail = response.text[:500]
            return None, f"API-Fehler {response.status_code}: {error_detail}"

        data = response.json()

        # Strategie 1: Tool-Call Response parsen
        if use_json_mode and 'content' in data:
            for item in data['content']:
                if isinstance(item, dict) and item.get('type') == 'tool_use':
                    tool_input = item.get('input', {})
                    if tool_input:
                        # Normalisiere die Response - extrahiere verschachtelte Strukturen
                        return normalize_response_structure(tool_input), None

        # Strategie 2: Text-Response parsen
        if 'content' in data and data['content']:
            response_text = data['content'][0].get('text', '')

            if not response_text:
                return None, "Leere Antwort von API erhalten"

            # Mehrfache Parsing-Versuche
            parsing_strategies = [
                lambda t: json.loads(t),  # Direkt
                lambda t: json.loads(bereinige_json(t)),  # Nach Bereinigung
                lambda t: json.loads(extract_json_object(t)),  # Extrahiere gr√∂√ütes JSON
                lambda t: json.loads(fix_common_json_errors(bereinige_json(t)))  # Repariere h√§ufige Fehler
            ]

            last_error = None
            for i, strategy in enumerate(parsing_strategies, 1):
                try:
                    parsed = strategy(response_text)
                    if parsed and isinstance(parsed, dict):
                        # Normalisiere die Struktur
                        return normalize_response_structure(parsed), None
                except json.JSONDecodeError as e:
                    last_error = e
                    continue
                except Exception as e:
                    last_error = e
                    continue

            # Alle Strategien fehlgeschlagen
            error_msg = f"JSON-Parsing fehlgeschlagen nach {len(parsing_strategies)} Versuchen. "
            error_msg += f"Letzter Fehler: {str(last_error)}"

            # Debug-Info (erste und letzte 200 Zeichen)
            debug_preview = response_text[:200] + "..." + response_text[-200:]
            error_msg += f"\n\nAntwort-Vorschau: {debug_preview}"

            return None, error_msg

        return None, "Unerwartetes Response-Format"

    except requests.exceptions.Timeout:
        return None, "API-Timeout: Anfrage dauerte zu lange (>180s)"
    except requests.exceptions.RequestException as e:
        return None, f"Netzwerkfehler: {str(e)}"
    except Exception as e:
        return None, f"Unerwarteter Fehler: {str(e)}"


def extract_json_object(text):
    """Extrahiert das gr√∂√üte JSON-Objekt aus Text"""
    stack = []
    start_idx = None

    for i, char in enumerate(text):
        if char in '{[':
            if not stack:
                start_idx = i
            stack.append(char)
        elif char in '}]':
            if stack:
                expected = '{' if char == '}' else '['
                if stack[-1] == expected:
                    stack.pop()
                    if not stack and start_idx is not None:
                        return text[start_idx:i+1]

    return text


def fix_common_json_errors(text):
    """Repariert h√§ufige JSON-Fehler"""
    # F√ºge fehlende Kommata zwischen Objekten ein
    patterns = [
        # Nach String-Wert vor neuem Key
        (r'("(?:[^"\\]|\\.)*")\s*\n\s*(")', r'\1,\n\2'),
        # Nach Zahl vor neuem Key
        (r'(\d+)\s*\n\s*(")', r'\1,\n\2'),
        # Nach Boolean vor neuem Key
        (r'(true|false)\s*\n\s*(")', r'\1,\n\2'),
        # Nach geschlossener Klammer vor neuem Key
        (r'([}\]])\s*\n\s*(")', r'\1,\n\2'),
    ]

    for pattern, replacement in patterns:
        text = re.sub(pattern, replacement, text)

    return text

def generiere_speiseplan_inkrementell(wochen, menulinien, menu_namen, api_key, progress_callback=None):
    """
    Generiert Speiseplan inkrementell (Tag f√ºr Tag) um Timeouts zu vermeiden

    Args:
        wochen: Anzahl der Wochen
        menulinien: Anzahl der Men√ºlinien
        menu_namen: Liste der Men√ºnamen
        api_key: API-Schl√ºssel
        progress_callback: Optional - Funktion f√ºr Fortschrittsanzeige

    Returns:
        Tuple von (speiseplan_data, error_message)
    """
    import time

    WOCHENTAGE = ["Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag", "Sonntag"]

    alle_wochen = []
    gesamt_tage = wochen * 7
    aktueller_tag = 0

    # Generiere Woche f√ºr Woche
    for woche_nr in range(1, wochen + 1):
        tage_daten = []

        # Generiere jeden Tag einzeln
        for tag_name in WOCHENTAGE:
            aktueller_tag += 1

            # Fortschrittsanzeige
            if progress_callback:
                progress_callback(
                    f"Generiere {tag_name}, Woche {woche_nr}... ({aktueller_tag}/{gesamt_tage} Tage)"
                )

            # Generiere Prompt f√ºr diesen Tag
            prompt = generiere_tages_prompt(tag_name, woche_nr, menulinien, menu_namen)

            # API-Aufruf f√ºr diesen einen Tag (mit mehreren Versuchen)
            max_retries = 3
            tag_data = None
            last_error = None

            for versuch in range(max_retries):
                tag_data, error = rufe_claude_api(prompt, api_key, max_tokens=8000, use_json_mode=True)

                if error:
                    last_error = error
                    if versuch < max_retries - 1:
                        wait_time = 2 * (versuch + 1)
                        if progress_callback:
                            progress_callback(f"‚ö†Ô∏è Fehler bei {tag_name}, Versuch {versuch + 1}/{max_retries}. Warte {wait_time}s...")
                        time.sleep(wait_time)
                        continue
                    else:
                        return None, f"Fehler bei {tag_name}, Woche {woche_nr} nach {max_retries} Versuchen: {error}"

                # Validiere und repariere Struktur
                if tag_data:
                    # Pr√ºfe Grundstruktur
                    if not isinstance(tag_data, dict):
                        last_error = f"tag_data ist kein Dictionary: {type(tag_data)}"
                        continue

                    # Versuche verschachtelte Strukturen zu extrahieren
                    # Manchmal gibt die API verschachtelte Responses zur√ºck
                    if "menues" not in tag_data:
                        # Suche in verschachtelten Strukturen
                        for key in ["data", "result", "output", "tag", "day"]:
                            if key in tag_data and isinstance(tag_data[key], dict):
                                if "menues" in tag_data[key]:
                                    tag_data = tag_data[key]
                                    break

                    # Repariere fehlende Felder
                    if "tag" not in tag_data:
                        tag_data["tag"] = tag_name

                    if "menues" not in tag_data or not isinstance(tag_data.get("menues"), list):
                        # Erweiterte Debug-Informationen
                        debug_keys = list(tag_data.keys()) if isinstance(tag_data, dict) else []
                        last_error = f"Feld 'menues' fehlt oder ist keine Liste. Vorhandene Felder: {debug_keys}"

                        # Log die tats√§chliche Struktur f√ºr Debugging
                        if progress_callback:
                            progress_callback(f"‚ö†Ô∏è Debug: API gab zur√ºck: {json.dumps(tag_data, ensure_ascii=False)[:300]}...")

                        if versuch < max_retries - 1:
                            if progress_callback:
                                progress_callback(f"‚ö†Ô∏è Ung√ºltige Struktur f√ºr {tag_name}, Versuch {versuch + 2}/{max_retries}...")
                            time.sleep(2)
                            continue
                        else:
                            # Letzte Rettungsversuch: Erstelle eine leere Struktur wenn gar nichts hilft
                            error_details = f"Ung√ºltige Struktur f√ºr {tag_name}, Woche {woche_nr}\n"
                            error_details += f"Fehler: {last_error}\n\n"
                            error_details += "Erhaltene Daten-Struktur:\n"
                            error_details += json.dumps(tag_data, indent=2, ensure_ascii=False)[:1000]
                            return None, error_details

                    # Stelle sicher, dass wir die richtige Anzahl Men√ºs haben
                    anzahl_menues = len(tag_data.get("menues", []))
                    if anzahl_menues != menulinien:
                        if progress_callback:
                            progress_callback(f"‚ö†Ô∏è {tag_name}: Erwartete {menulinien} Men√ºs, erhielt {anzahl_menues}")

                        # Versuche zu reparieren
                        menues = tag_data["menues"]
                        if anzahl_menues > menulinien:
                            # Zu viele Men√ºs: K√ºrzen
                            tag_data["menues"] = menues[:menulinien]
                        elif anzahl_menues < menulinien and anzahl_menues > 0:
                            # Zu wenige Men√ºs: Dupliziere das letzte
                            while len(tag_data["menues"]) < menulinien:
                                dupliziertes_menu = dict(menues[-1])
                                idx = len(tag_data["menues"])
                                if idx < len(menu_namen):
                                    dupliziertes_menu["menuName"] = menu_namen[idx]
                                tag_data["menues"].append(dupliziertes_menu)

                            st.info(f"‚ÑπÔ∏è {tag_name}: Men√ºanzahl angepasst auf {menulinien}")
                        elif anzahl_menues == 0:
                            # Keine Men√ºs: Fehler
                            last_error = "Keine Men√ºs in der Antwort gefunden"
                            if versuch < max_retries - 1:
                                continue
                            else:
                                return None, f"Keine Men√ºs f√ºr {tag_name}, Woche {woche_nr} generiert"

                    # Validiere jedes Men√º
                    for idx, menu in enumerate(tag_data["menues"], 1):
                        if not isinstance(menu, dict):
                            last_error = f"Men√º {idx} ist kein Dictionary"
                            continue

                        # Pr√ºfe Pflichtfelder
                        required = ["menuName", "fruehstueck", "mittagessen", "abendessen"]
                        missing = [f for f in required if f not in menu]
                        if missing:
                            last_error = f"Men√º {idx}: Fehlende Felder: {', '.join(missing)}"
                            continue

                        # Pr√ºfe Mittagessen-Struktur
                        if "mittagessen" in menu and isinstance(menu["mittagessen"], dict):
                            mittag = menu["mittagessen"]
                            if "hauptgericht" not in mittag:
                                last_error = f"Men√º {idx}: Hauptgericht fehlt"
                                continue
                            if "beilagen" not in mittag or not isinstance(mittag["beilagen"], list):
                                # Setze leere Liste wenn fehlend
                                mittag["beilagen"] = []
                            if len(mittag["beilagen"]) < 2:
                                st.warning(f"‚ö†Ô∏è {tag_name}, Men√º {idx}: Nur {len(mittag['beilagen'])} Beilagen (empfohlen: mindestens 2)")

                    # Wenn wir hier angekommen sind, ist die Struktur valide
                    tage_daten.append(tag_data)
                    break
                else:
                    last_error = "Keine Daten von API erhalten"
                    if versuch < max_retries - 1:
                        if progress_callback:
                            progress_callback(f"‚ö†Ô∏è Keine Daten f√ºr {tag_name}, Versuch {versuch + 2}/{max_retries}...")
                        time.sleep(2)
                        continue
                    else:
                        return None, f"Keine Daten f√ºr {tag_name}, Woche {woche_nr} nach {max_retries} Versuchen"

            # Wenn nach allen Versuchen immer noch kein valider Tag
            if not tag_data or tag_data not in tage_daten:
                debug_info = f"Letzter Fehler: {last_error}"
                if tag_data:
                    debug_info += f"\n\nErhaltene Daten-Struktur: {json.dumps(tag_data, indent=2, ensure_ascii=False)[:500]}..."
                return None, f"Ung√ºltige Struktur f√ºr {tag_name}, Woche {woche_nr}\n\n{debug_info}"

            # Kleine Pause zwischen Anfragen um Rate-Limits zu vermeiden
            time.sleep(0.5)

        # F√ºge Woche hinzu
        wochen_data = {
            "woche": woche_nr,
            "tage": tage_daten
        }
        alle_wochen.append(wochen_data)

    # Erstelle finalen Speiseplan
    speiseplan = {
        "speiseplan": {
            "wochen": alle_wochen,
            "menuLinien": menulinien,
            "menuNamen": menu_namen
        }
    }

    return speiseplan, None


def erstelle_speiseplan_pdf(speiseplan):
    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=landscape(A4), rightMargin=20*mm, leftMargin=20*mm,
                          topMargin=20*mm, bottomMargin=20*mm)
    
    elements = []
    styles = getSampleStyleSheet()
    
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=24,
        textColor=colors.HexColor('#d97706'),
        spaceAfter=30,
        alignment=TA_CENTER
    )
    
    elements.append(Paragraph("Speiseplan", title_style))
    elements.append(Paragraph("Gemeinschaftsverpflegung", styles['Normal']))
    elements.append(Spacer(1, 20))
    
    for woche in speiseplan['speiseplan']['wochen']:
        woche_style = ParagraphStyle('Woche', parent=styles['Heading2'], fontSize=16, 
                                    textColor=colors.HexColor('#d97706'))
        elements.append(Paragraph(f"Woche {woche['woche']}", woche_style))
        elements.append(Spacer(1, 10))
        
        for tag in woche['tage']:
            tag_style = ParagraphStyle('Tag', parent=styles['Heading3'], fontSize=14)
            elements.append(Paragraph(tag['tag'], tag_style))
            elements.append(Spacer(1, 5))
            
            for menu in tag['menues']:
                data = [[Paragraph(f"<b>{menu['menuName']}</b>", styles['Normal'])]]
                
                hauptgericht = menu['mittagessen']['hauptgericht']
                beilagen = menu['mittagessen'].get('beilagen', [])
                beilagen_text = f"mit {', '.join(beilagen)}" if beilagen else ""
                
                data.append([Paragraph(f"{hauptgericht} {beilagen_text}", styles['Normal'])])
                
                t = Table(data, colWidths=[250*mm])
                t.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#fff5f0')),
                    ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
                    ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, -1), 10),
                    ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
                    ('TOPPADDING', (0, 0), (-1, -1), 8),
                    ('GRID', (0, 0), (-1, -1), 0.5, colors.grey)
                ]))
                elements.append(t)
                elements.append(Spacer(1, 5))
            
            elements.append(Spacer(1, 10))
        
        elements.append(PageBreak())
    
    doc.build(elements)
    buffer.seek(0)
    return buffer

def erstelle_rezept_pdf(rezept):
    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=20*mm, leftMargin=20*mm,
                          topMargin=20*mm, bottomMargin=20*mm)
    
    elements = []
    styles = getSampleStyleSheet()
    
    title_style = ParagraphStyle('Title', parent=styles['Heading1'], fontSize=18, 
                                textColor=colors.HexColor('#d97706'))
    
    elements.append(Paragraph(rezept['name'], title_style))
    elements.append(Spacer(1, 10))
    elements.append(Paragraph(f"{rezept['portionen']} Portionen | {rezept['menu']} | {rezept['tag']}, Woche {rezept['woche']}", 
                             styles['Normal']))
    elements.append(Spacer(1, 5))
    elements.append(Paragraph(f"Vorbereitung: {rezept['zeiten']['vorbereitung']} | Garzeit: {rezept['zeiten']['garzeit']}", 
                             styles['Normal']))
    elements.append(Spacer(1, 15))
    
    # Zutaten
    elements.append(Paragraph("<b>Zutaten</b>", styles['Heading2']))
    for zutat in rezept['zutaten']:
        elements.append(Paragraph(f"‚Ä¢ {zutat['menge']} {zutat['name']}", styles['Normal']))
    elements.append(Spacer(1, 15))
    
    # Zubereitung
    elements.append(Paragraph("<b>Zubereitung</b>", styles['Heading2']))
    for i, schritt in enumerate(rezept['zubereitung'], 1):
        elements.append(Paragraph(f"<b>Schritt {i}:</b> {schritt}", styles['Normal']))
        elements.append(Spacer(1, 5))
    elements.append(Spacer(1, 15))
    
    # N√§hrwerte
    elements.append(Paragraph("<b>N√§hrwerte pro Portion</b>", styles['Heading2']))
    naehr = rezept['naehrwerte']
    elements.append(Paragraph(
        f"{naehr['kalorien']} | Protein: {naehr['protein']} | Fett: {naehr['fett']} | KH: {naehr['kohlenhydrate']} | Ballaststoffe: {naehr['ballaststoffe']}", 
        styles['Normal']))
    
    if rezept.get('allergene'):
        elements.append(Spacer(1, 10))
        elements.append(Paragraph(f"<b>Allergene:</b> {', '.join(rezept['allergene'])}", styles['Normal']))
    
    if rezept.get('tipps'):
        elements.append(Spacer(1, 10))
        elements.append(Paragraph("<b>Tipps f√ºr die Gro√ük√ºche</b>", styles['Heading2']))
        for tipp in rezept['tipps']:
            elements.append(Paragraph(f"‚Ä¢ {tipp}", styles['Normal']))
    
    doc.build(elements)
    buffer.seek(0)
    return buffer

def erstelle_alle_rezepte_pdf(rezepte_data):
    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=20*mm, leftMargin=20*mm,
                          topMargin=20*mm, bottomMargin=20*mm)
    
    elements = []
    styles = getSampleStyleSheet()
    
    for i, rezept in enumerate(rezepte_data['rezepte']):
        if i > 0:
            elements.append(PageBreak())
        
        title_style = ParagraphStyle('Title', parent=styles['Heading1'], fontSize=18, 
                                    textColor=colors.HexColor('#d97706'))
        
        elements.append(Paragraph(rezept['name'], title_style))
        elements.append(Spacer(1, 10))
        elements.append(Paragraph(f"{rezept['portionen']} Portionen | {rezept['menu']}", styles['Normal']))
        elements.append(Spacer(1, 5))
        elements.append(Paragraph(f"Vorbereitung: {rezept['zeiten']['vorbereitung']} | Garzeit: {rezept['zeiten']['garzeit']}", 
                                 styles['Normal']))
        elements.append(Spacer(1, 15))
        
        elements.append(Paragraph("<b>Zutaten</b>", styles['Heading2']))
        for zutat in rezept['zutaten']:
            elements.append(Paragraph(f"‚Ä¢ {zutat['menge']} {zutat['name']}", styles['Normal']))
        elements.append(Spacer(1, 15))
        
        elements.append(Paragraph("<b>Zubereitung</b>", styles['Heading2']))
        for j, schritt in enumerate(rezept['zubereitung'], 1):
            elements.append(Paragraph(f"<b>{j}.</b> {schritt}", styles['Normal']))
            elements.append(Spacer(1, 5))
        elements.append(Spacer(1, 15))
        
        elements.append(Paragraph("<b>N√§hrwerte pro Portion</b>", styles['Heading2']))
        naehr = rezept['naehrwerte']
        elements.append(Paragraph(
            f"{naehr['kalorien']} | Protein: {naehr['protein']} | Fett: {naehr['fett']} | KH: {naehr['kohlenhydrate']}", 
            styles['Normal']))
    
    doc.build(elements)
    buffer.seek(0)
    return buffer

# Hauptbereich
if not api_key:
    st.warning("‚ö†Ô∏è Bitte geben Sie Ihren Claude API-Key in der Sidebar ein.")
    st.info("Sie k√∂nnen einen API-Key unter https://console.anthropic.com/ erstellen.")
else:
    if st.sidebar.button("üöÄ Speiseplan generieren & pr√ºfen", type="primary", use_container_width=True):
        # Container f√ºr Fortschrittsanzeige
        progress_placeholder = st.empty()
        status_placeholder = st.empty()

        def zeige_fortschritt(nachricht):
            """Callback f√ºr Fortschrittsanzeige"""
            status_placeholder.info(f"üîÑ {nachricht}")

        with st.spinner("‚è≥ Speiseplan wird erstellt (Tag f√ºr Tag)..."):
            # Verwende inkrementelle Generierung um Timeouts zu vermeiden
            speiseplan_data, error = generiere_speiseplan_inkrementell(
                wochen,
                menulinien,
                menu_namen,
                api_key,
                progress_callback=zeige_fortschritt
            )

            # L√∂sche Fortschrittsanzeige
            status_placeholder.empty()

            if error:
                st.error(f"‚ùå Fehler beim Erstellen des Speiseplans")

                # Zeige Fehlerdetails
                st.markdown(f"**Fehlerdetails:**")
                st.code(error, language="text")

                # Debug-Informationen in Expander
                with st.expander("üîç Debug-Informationen und L√∂sungen"):
                    st.markdown("""
                    **M√∂gliche Ursachen:**
                    1. **Ung√ºltige API-Antwort**: Die KI hat keine valide JSON-Struktur zur√ºckgegeben
                    2. **API-Zeit√ºberschreitung**: Die Anfrage hat zu lange gedauert
                    3. **Rate-Limiting**: Zu viele Anfragen in kurzer Zeit
                    4. **Netzwerkprobleme**: Verbindungsfehler zur API

                    **Empfohlene L√∂sungen:**
                    - ‚úÖ **Versuchen Sie es erneut**: Manchmal hilft ein zweiter Versuch
                    - üìâ **Reduzieren Sie die Komplexit√§t**:
                      - Weniger Wochen (z.B. 1 statt 2)
                      - Weniger Men√ºlinien (z.B. 2 statt 3)
                    - ‚è±Ô∏è **Warten Sie kurz**: Bei Rate-Limiting 1-2 Minuten warten
                    - üîë **Pr√ºfen Sie Ihren API-Key**: Stellen Sie sicher, dass er g√ºltig ist
                    - üåê **Pr√ºfen Sie Ihre Internetverbindung**

                    **Technische Details:**
                    Das System versucht automatisch 3x jeden Tag zu generieren und repariert
                    kleinere Strukturfehler automatisch. Wenn der Fehler weiterhin besteht,
                    k√∂nnte ein grundlegendes Problem mit der API-Kommunikation vorliegen.
                    """)

                    # Zeige letzte Konfiguration
                    st.divider()
                    st.markdown("**Ihre Konfiguration:**")
                    st.write(f"- Wochen: {wochen}")
                    st.write(f"- Men√ºlinien: {menulinien}")
                    st.write(f"- Men√º-Namen: {', '.join(menu_namen)}")

                    # Quick-Actions
                    st.divider()
                    st.markdown("**Schnellaktionen:**")
                    col1, col2 = st.columns(2)
                    with col1:
                        if st.button("üîÑ Mit 1 Woche erneut versuchen", key="retry_1week"):
                            st.info("Bitte setzen Sie die Wochenanzahl auf 1 in der Sidebar und klicken Sie erneut auf 'Speiseplan generieren'")
                    with col2:
                        if st.button("üìã Nur 1 Men√ºlinie versuchen", key="retry_1menu"):
                            st.info("Bitte setzen Sie die Men√ºlinien auf 1 in der Sidebar und klicken Sie erneut auf 'Speiseplan generieren'")
            else:
                st.session_state['speiseplan'] = speiseplan_data
                st.success("‚úÖ Speiseplan erfolgreich erstellt!")

                # Rezepte in Batches generieren
                rezept_status = st.empty()
                def zeige_rezept_fortschritt(nachricht):
                    rezept_status.info(f"üìñ {nachricht}")

                with st.spinner("üìñ Rezepte werden erstellt (in Batches)..."):
                    rezepte_data, error2 = generiere_rezepte_batch(
                        speiseplan_data,
                        api_key,
                        batch_size=7,  # 7 Rezepte pro Batch (1 Tag)
                        progress_callback=zeige_rezept_fortschritt
                    )

                    rezept_status.empty()

                    if error2:
                        st.warning(f"‚ö†Ô∏è Speiseplan erstellt, aber Rezepte fehlgeschlagen: {error2}")
                        with st.expander("üîç Rezept-Fehler Details"):
                            st.code(error2, language="text")
                        st.session_state['rezepte'] = None
                    else:
                        st.session_state['rezepte'] = rezepte_data
                        st.success(f"‚úÖ {len(rezepte_data['rezepte'])} Rezepte erfolgreich erstellt!")

                st.balloons()

# Anzeige der Ergebnisse
if 'speiseplan' in st.session_state and st.session_state['speiseplan']:
    tab1, tab2 = st.tabs(["üìã Speiseplan", "üìñ Rezepte"])
    
    with tab1:
        st.header("Speiseplan")
        
        # PDF-Export Button
        pdf_buffer = erstelle_speiseplan_pdf(st.session_state['speiseplan'])
        st.download_button(
            label="üìÑ Speiseplan als PDF herunterladen (DIN A4 quer)",
            data=pdf_buffer,
            file_name="Speiseplan.pdf",
            mime="application/pdf",
            use_container_width=True
        )
        
        st.divider()
        
        # Speiseplan anzeigen
        for woche in st.session_state['speiseplan']['speiseplan']['wochen']:
            st.subheader(f"Woche {woche['woche']}")
            
            for tag in woche['tage']:
                st.markdown(f"### {tag['tag']}")
                
                for menu in tag['menues']:
                    with st.expander(f"**{menu['menuName']}**", expanded=True):
                        col1, col2, col3 = st.columns(3)
                        
                        with col1:
                            st.markdown("**üåÖ Fr√ºhst√ºck**")
                            st.write(menu['fruehstueck']['hauptgericht'])
                            if menu['fruehstueck'].get('beilagen'):
                                st.caption(f"mit {', '.join(menu['fruehstueck']['beilagen'])}")
                        
                        with col2:
                            st.markdown("**üçΩÔ∏è Mittagessen**")
                            st.write(f"**{menu['mittagessen']['hauptgericht']}**")
                            if menu['mittagessen'].get('beilagen'):
                                st.caption(f"ü•î Beilagen: {', '.join(menu['mittagessen']['beilagen'])}")
                            if menu['mittagessen'].get('naehrwerte'):
                                st.caption(f"üìä {menu['mittagessen']['naehrwerte']['kalorien']} | Protein: {menu['mittagessen']['naehrwerte']['protein']}")
                        
                        with col3:
                            st.markdown("**üåô Abendessen**")
                            st.write(menu['abendessen']['hauptgericht'])
                            if menu['abendessen'].get('beilagen'):
                                st.caption(f"mit {', '.join(menu['abendessen']['beilagen'])}")
                
                st.divider()
    
    with tab2:
        if 'rezepte' in st.session_state and st.session_state['rezepte']:
            st.header("Detaillierte Rezepte")
            
            # Alle Rezepte PDF-Export
            alle_rezepte_pdf = erstelle_alle_rezepte_pdf(st.session_state['rezepte'])
            st.download_button(
                label="üìö Alle Rezepte als PDF herunterladen",
                data=alle_rezepte_pdf,
                file_name="Alle_Rezepte.pdf",
                mime="application/pdf",
                use_container_width=True
            )
            
            st.divider()
            
            for rezept in st.session_state['rezepte']['rezepte']:
                with st.expander(f"**{rezept['name']}** ({rezept['menu']})", expanded=False):
                    col1, col2 = st.columns([3, 1])
                    
                    with col1:
                        st.markdown(f"**{rezept['portionen']} Portionen** | {rezept['tag']}, Woche {rezept['woche']}")
                        st.caption(f"‚è±Ô∏è Vorbereitung: {rezept['zeiten']['vorbereitung']} | Garzeit: {rezept['zeiten']['garzeit']}")
                    
                    with col2:
                        rezept_pdf = erstelle_rezept_pdf(rezept)
                        st.download_button(
                            label="üìÑ Als PDF",
                            data=rezept_pdf,
                            file_name=f"Rezept_{rezept['name'].replace(' ', '_')}.pdf",
                            mime="application/pdf",
                            key=f"pdf_{rezept['name']}"
                        )
                    
                    st.markdown("### Zutaten")
                    for zutat in rezept['zutaten']:
                        st.write(f"‚Ä¢ **{zutat['menge']}** {zutat['name']}")
                    
                    st.markdown("### Zubereitung")
                    for i, schritt in enumerate(rezept['zubereitung'], 1):
                        st.info(f"**Schritt {i}:** {schritt}")
                    
                    st.markdown("### N√§hrwerte pro Portion")
                    n = rezept['naehrwerte']
                    cols = st.columns(5)
                    cols[0].metric("Kalorien", n['kalorien'])
                    cols[1].metric("Protein", n['protein'])
                    cols[2].metric("Fett", n['fett'])
                    cols[3].metric("KH", n['kohlenhydrate'])
                    cols[4].metric("Ballaststoffe", n['ballaststoffe'])
                    
                    if rezept.get('tipps'):
                        st.markdown("### üí° Tipps f√ºr die Gro√ük√ºche")
                        for tipp in rezept['tipps']:
                            st.success(tipp)
        else:
            st.info("Rezepte werden nach der Speiseplan-Generierung hier angezeigt.")